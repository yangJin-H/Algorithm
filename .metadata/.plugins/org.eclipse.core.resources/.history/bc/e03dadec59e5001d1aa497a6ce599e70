package gold1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class BJ_1162_도로포장 {
	
	static class Node implements Comparable<Node> {
		int index, dist;

		public Node(int index, int dist) {
			this.index = index;
			this.dist = dist;
		}

		@Override
		public int compareTo(Node o) {
			return this.dist - o.dist;
		}
	}
	
	static int N, M, K;
	static ArrayList<ArrayList<Node>> graph;
	static int[] distance;
	
	static final int INF = 1000000000;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		
		graph = new ArrayList<>();
		for(int i = 0; i <= N; i++) {
			graph.add(new ArrayList<Node>());
		}
		
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int d = Integer.parseInt(st.nextToken());
			
			graph.get(u).add(new Node(v, d));
			graph.get(v).add(new Node(u, d));
		}
		
		distance = new int[N+1];
		for(int i = 1; i <= N; i++) distance[i] = INF;
		
		dijkstra(1);
		
		System.out.println(Arrays.toString(distance));
	}

	private static void dijkstra(int start) {
		PriorityQueue<Node> queue = new PriorityQueue<Node>();
		distance[start] = 0;
		queue.offer(new Node(start, 0));
		
		while(!queue.isEmpty()) {
			Node node = queue.poll();
			int idx = node.index;
			int dist = node.dist;
			
			if(distance[idx] < dist) continue;
			
			for(int i = 0; i < graph.get(idx).size(); i++) {
				int nidx = graph.get(idx).get(i).index;
				int ndist = dist + graph.get(idx).get(i).dist;
				
				if(distance[nidx] > ndist) {
					distance[idx] = ndist;
					queue.add(new Node(nidx, ndist));
				}
			}
		}
	}
}
